


import java.awt.Color;
import java.awt.Font;
import java.awt.Image;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.ActionEvent;
import java.io.*;
import java.net.URL;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
/*

    TextBase Editor: Aplicacion de edicion de texto hacho con Java, NetBeans
                     y varias otras clases que pueden verse importadas justo 
                     encima de esta descripcion. 
    
    Proyecto: 2do Pacial - Programacion I.

    Fecha de Presentacion: Lunes 08 de Julio, 2019.

    Desarrollador: Emil Perez Barranco - 2018-6076

*/

/**
 *
 * @author Emil
 */
public class Window extends javax.swing.JFrame {
    
    // Variables globales para el desarrollo de las funciones.
    String FileName;
    File File;
    JFileChooser Dialog;    
    Clipboard Clip = getToolkit().getSystemClipboard();
         
    /**
     * Creates new form Window
     */
    
    public Window() {
        initComponents();
        setTitle("TextBase Editor - Java");
        setResizable(false);
        setBounds(200, 100, 900, 520);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        ChangeFontPanel.setVisible(false);  
        IniatializeEditor(); 
        /* 
            El metodo: InitializeEditor(), Inicializa de todas las funciones que 
                       posee el editor de texto, todos los metodos fueron
                       encapsulados aqui por motivos de organizacion.
        */
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        MainContainer = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TextContainer = new javax.swing.JTextPane();
        ChangeFontPanel = new javax.swing.JPanel();
        Title4 = new javax.swing.JLabel();
        Title1 = new javax.swing.JLabel();
        Title2 = new javax.swing.JLabel();
        Title3 = new javax.swing.JLabel();
        FamilyOp = new javax.swing.JComboBox<>();
        SizeOp = new javax.swing.JComboBox<>();
        StyleOp = new javax.swing.JComboBox<>();
        Done = new javax.swing.JButton();
        ColorOp1 = new javax.swing.JRadioButton();
        ColorOp2 = new javax.swing.JRadioButton();
        ColorOp3 = new javax.swing.JRadioButton();
        ColorOp4 = new javax.swing.JRadioButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        NewFileOp = new javax.swing.JMenu();
        NewFile = new javax.swing.JMenuItem();
        OpenFile = new javax.swing.JMenuItem();
        SaveFile = new javax.swing.JMenuItem();
        ExitOp = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        CopyOp = new javax.swing.JMenuItem();
        PasteOp = new javax.swing.JMenuItem();
        CutOp = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        ChangeFont = new javax.swing.JMenuItem();
        Clear = new javax.swing.JMenuItem();
        Search = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(900, 600));

        jPanel2.setBackground(new java.awt.Color(51, 51, 51));
        jPanel2.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(jPanel2, java.awt.BorderLayout.LINE_START);

        jPanel3.setBackground(new java.awt.Color(51, 51, 51));
        jPanel3.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(jPanel3, java.awt.BorderLayout.LINE_END);

        MainContainer.setBackground(new java.awt.Color(51, 51, 51));
        MainContainer.setForeground(new java.awt.Color(255, 255, 255));
        MainContainer.setLayout(null);

        TextContainer.setEditable(false);
        TextContainer.setBackground(new java.awt.Color(255, 255, 255));
        TextContainer.setMaximumSize(new java.awt.Dimension(880, 400));
        TextContainer.setMinimumSize(new java.awt.Dimension(880, 400));
        TextContainer.setPreferredSize(new java.awt.Dimension(880, 400));
        jScrollPane2.setViewportView(TextContainer);

        MainContainer.add(jScrollPane2);
        jScrollPane2.setBounds(0, 10, 880, 400);

        ChangeFontPanel.setBackground(new java.awt.Color(51, 51, 51));
        ChangeFontPanel.setForeground(new java.awt.Color(255, 255, 255));
        ChangeFontPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Title4.setBackground(new java.awt.Color(51, 51, 51));
        Title4.setFont(new java.awt.Font("Ubuntu Light", 1, 14)); // NOI18N
        Title4.setForeground(new java.awt.Color(255, 255, 255));
        Title4.setText("Font Color");
        ChangeFontPanel.add(Title4, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 0, -1, 20));

        Title1.setBackground(new java.awt.Color(51, 51, 51));
        Title1.setFont(new java.awt.Font("Ubuntu Light", 1, 14)); // NOI18N
        Title1.setForeground(new java.awt.Color(255, 255, 255));
        Title1.setText("Font Family");
        ChangeFontPanel.add(Title1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 0, -1, 30));

        Title2.setBackground(new java.awt.Color(51, 51, 51));
        Title2.setFont(new java.awt.Font("Ubuntu Light", 1, 14)); // NOI18N
        Title2.setForeground(new java.awt.Color(255, 255, 255));
        Title2.setText("Font Size");
        ChangeFontPanel.add(Title2, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 0, -1, 30));

        Title3.setBackground(new java.awt.Color(51, 51, 51));
        Title3.setFont(new java.awt.Font("Ubuntu Light", 1, 14)); // NOI18N
        Title3.setForeground(new java.awt.Color(255, 255, 255));
        Title3.setText("Font Style");
        ChangeFontPanel.add(Title3, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 0, -1, 30));

        FamilyOp.setBackground(new java.awt.Color(51, 51, 51));
        FamilyOp.setForeground(new java.awt.Color(255, 255, 255));
        FamilyOp.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose", "Roboto", "Comfortaa", "Verdana", "Lobster" }));
        FamilyOp.setAutoscrolls(true);
        ChangeFontPanel.add(FamilyOp, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, 120, 30));

        SizeOp.setBackground(new java.awt.Color(51, 51, 51));
        SizeOp.setForeground(new java.awt.Color(255, 255, 255));
        SizeOp.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose", "12", "14", "16", "18" }));
        SizeOp.setAutoscrolls(true);
        ChangeFontPanel.add(SizeOp, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 40, 80, 30));

        StyleOp.setBackground(new java.awt.Color(51, 51, 51));
        StyleOp.setForeground(new java.awt.Color(255, 255, 255));
        StyleOp.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose", "Bold", "Italic", "None" }));
        StyleOp.setAutoscrolls(true);
        ChangeFontPanel.add(StyleOp, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 40, 120, 30));

        Done.setBackground(new java.awt.Color(51, 51, 51));
        Done.setForeground(new java.awt.Color(255, 255, 255));
        Done.setText("Done");
        ChangeFontPanel.add(Done, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 20, 70, -1));

        ColorOp1.setBackground(new java.awt.Color(51, 51, 51));
        buttonGroup1.add(ColorOp1);
        ColorOp1.setForeground(new java.awt.Color(255, 255, 255));
        ColorOp1.setText("Blue");
        ChangeFontPanel.add(ColorOp1, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 20, -1, -1));

        ColorOp2.setBackground(new java.awt.Color(51, 51, 51));
        buttonGroup1.add(ColorOp2);
        ColorOp2.setForeground(new java.awt.Color(255, 255, 255));
        ColorOp2.setText("Red");
        ChangeFontPanel.add(ColorOp2, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 20, -1, -1));

        ColorOp3.setBackground(new java.awt.Color(51, 51, 51));
        buttonGroup1.add(ColorOp3);
        ColorOp3.setForeground(new java.awt.Color(255, 255, 255));
        ColorOp3.setText("Green");
        ChangeFontPanel.add(ColorOp3, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 50, -1, -1));

        ColorOp4.setBackground(new java.awt.Color(51, 51, 51));
        buttonGroup1.add(ColorOp4);
        ColorOp4.setForeground(new java.awt.Color(255, 255, 255));
        ColorOp4.setText("Black");
        ChangeFontPanel.add(ColorOp4, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 50, -1, -1));

        MainContainer.add(ChangeFontPanel);
        ChangeFontPanel.setBounds(10, 430, 860, 90);

        getContentPane().add(MainContainer, java.awt.BorderLayout.CENTER);

        jMenuBar1.setBackground(new java.awt.Color(51, 51, 51));
        jMenuBar1.setForeground(new java.awt.Color(255, 255, 255));
        jMenuBar1.setBorderPainted(false);

        NewFileOp.setText("File");

        NewFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        NewFile.setText("New");
        NewFileOp.add(NewFile);

        OpenFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        OpenFile.setText("Open ");
        NewFileOp.add(OpenFile);

        SaveFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        SaveFile.setText("Save ");
        NewFileOp.add(SaveFile);

        ExitOp.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        ExitOp.setText("Exit");
        NewFileOp.add(ExitOp);

        jMenuBar1.add(NewFileOp);

        jMenu2.setText("Edit");

        CopyOp.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        CopyOp.setText("Copy");
        jMenu2.add(CopyOp);

        PasteOp.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        PasteOp.setText("Paste");
        jMenu2.add(PasteOp);

        CutOp.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        CutOp.setText("Cut");
        jMenu2.add(CutOp);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Text");

        ChangeFont.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        ChangeFont.setText("Change Font");
        jMenu3.add(ChangeFont);

        Clear.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_PERIOD, java.awt.event.InputEvent.CTRL_MASK));
        Clear.setText("Clear ");
        jMenu3.add(Clear);

        Search.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        Search.setText("Search");
        jMenu3.add(Search);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        /*
            Aqui se esta utilizando un tema personalizado: JTatto
            Este tema fue agregado como dependencia/dependency JTattoo-1.6.11
        */
        try {
            UIManager.setLookAndFeel("com.jtattoo.plaf.texture.TextureLookAndFeel");
        }
        catch(ClassNotFoundException | IllegalAccessException | InstantiationException | UnsupportedLookAndFeelException Ex) {
            Ex.printStackTrace();
        }
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Window().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem ChangeFont;
    private javax.swing.JPanel ChangeFontPanel;
    private javax.swing.JMenuItem Clear;
    private javax.swing.JRadioButton ColorOp1;
    private javax.swing.JRadioButton ColorOp2;
    private javax.swing.JRadioButton ColorOp3;
    private javax.swing.JRadioButton ColorOp4;
    private javax.swing.JMenuItem CopyOp;
    private javax.swing.JMenuItem CutOp;
    private javax.swing.JButton Done;
    private javax.swing.JMenuItem ExitOp;
    private javax.swing.JComboBox<String> FamilyOp;
    private javax.swing.JPanel MainContainer;
    private javax.swing.JMenuItem NewFile;
    private javax.swing.JMenu NewFileOp;
    private javax.swing.JMenuItem OpenFile;
    private javax.swing.JMenuItem PasteOp;
    private javax.swing.JMenuItem SaveFile;
    private javax.swing.JMenuItem Search;
    private javax.swing.JComboBox<String> SizeOp;
    private javax.swing.JComboBox<String> StyleOp;
    public javax.swing.JTextPane TextContainer;
    private javax.swing.JLabel Title1;
    private javax.swing.JLabel Title2;
    private javax.swing.JLabel Title3;
    private javax.swing.JLabel Title4;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
    
    
    // Fuentes Personalizadas para el Contener de Texto
    String Roboto = "Roboto";
    String Comfortaa = "Comfortaa";
    String Verdana = "Verdana";    
    String Lobster = "Lobster";
    
    // Colores Personalizados para el Contenedor de Texto
    Color Blue = new Color(71, 158, 228);    
    Color Red = new Color(231, 76, 60);
    Color Green = new Color(39, 174, 96);    
    Color Black = Color.BLACK;
    
    private void IniatializeEditor(){
        File(); // Metodo Encargado de Manejar Archivos
        Edit(); // Metodo encargado de la Edicion del Texto
        Text(); // Metodo encargado de los Ajustes del Texto
        /* Exception: App Icon */
        icon(); // Icono agregado a la aplicacion
    };

    private void File(){
        // Creando un espacio limpio para un Nuevo Archivo
        NewFile.addActionListener((ActionEvent e) -> {
            setTitle("Untitled.txt");
            TextContainer.setText("");
        });
        
        // Abriendo un Archivo
        OpenFile.addActionListener((ActionEvent e) -> {
            Dialog = new JFileChooser();
            Dialog.showOpenDialog(null);
            File = Dialog.getSelectedFile();
            FileName = File.getAbsolutePath();
            String Name = File.getName();

            Object Obj = e.getSource();
            if (Obj == OpenFile) {
                try {

                    FileReader Reader = new FileReader(FileName);
                    try (BufferedReader BR = new BufferedReader(Reader)) {
                        TextContainer.read(BR, null);
                    }
                    TextContainer.requestFocus();
                    setTitle(Name);

                } catch (IOException Ex) {
                    JOptionPane.showMessageDialog(null, Ex);
                }
            }
        });
        
        // Guardando un Archivo
        SaveFile.addActionListener((ActionEvent e) -> {
            Dialog = new JFileChooser();
            Dialog.showSaveDialog(null);
            File = Dialog.getSelectedFile();
            FileName = File.getAbsolutePath();
            String Content = TextContainer.getText();
            try {
                FileWriter Writer = new FileWriter(FileName);
                Writer.write(Content);
                String filePath = File.getAbsolutePath();
                if(!filePath.endsWith(".txt")) {
                    File = new File(filePath + ".txt");
                }
                Writer.close();
                setTitle(File.getName());
                

            } catch(IOException Ex){
                JOptionPane.showMessageDialog(null, Ex);
            }
        });
        
        // Saliendo de la Aplicacion
        ExitOp.addActionListener((ActionEvent e) -> {
            System.exit(0);
        });
        
    }
    
    private void Edit() {
        // Copiando el texto seleccionado
        CopyOp.addActionListener((ActionEvent e) -> {
            String Copy = TextContainer.getText();
            StringSelection stringSelection = new StringSelection(Copy);
            Clip.setContents(stringSelection, null);
        });
        
        // Pegando el codigo seleccionado
        PasteOp.addActionListener((ActionEvent e) -> {
            String Paste = TextContainer.getText();
            StringSelection stringSelection = new StringSelection(Paste);
            TextContainer.replaceSelection(Paste);
        });
        
        // Cortando el texto seleccionado
        CutOp.addActionListener((ActionEvent e) -> {
            TextContainer.replaceSelection("");
        });
    }
    
    private void Text() {
        
        // Abriendo el Panel de Ajustes de Texto---------
        ChangeFont.addActionListener((ActionEvent e) -> {
            ChangeFontPanel.setVisible(true);
            setSize(900, 570);
        });
        //-----------------------------------------------
        
        // Cerrando el Panel de Ajustes de Texto---------
        Done.addActionListener((ActionEvent e) ->{
            setSize(900, 520);
            ChangeFontPanel.setVisible(false);
        });
        //-----------------------------------------------
        
        // Limpiando el Contenedor de Texto--------------
        Clear.addActionListener((ActionEvent e) ->{
            setTitle("TextBase Editor - Java");
            TextContainer.setText("");
        });
        //-----------------------------------------------
        
        
        
        // Cambiando la Fuente de Texto--------------------------
        FamilyOp.addActionListener((ActionEvent e) -> {
            String Item = (String) FamilyOp.getSelectedItem();
            switch(Item){
                case "Roboto":
                    TextContainer.setFont(new Font(Roboto, TextContainer.getFont().getStyle(), TextContainer.getFont().getSize()));
                    break;
                case "Comfortaa":
                    TextContainer.setFont(new Font(Comfortaa, TextContainer.getFont().getStyle(), TextContainer.getFont().getSize()));
                    break;
                case "Verdana":
                    TextContainer.setFont(new Font(Verdana, TextContainer.getFont().getStyle(), TextContainer.getFont().getSize()));
                    break;
                case "Lobster":
                    TextContainer.setFont(new Font(Lobster, TextContainer.getFont().getStyle(), TextContainer.getFont().getSize()));
                    break;
            }
        });
        
        //-----------------------------------------------
        
        //Cambiando el Tamaño del Texto------------------
        SizeOp.addActionListener((ActionEvent e) -> {
            String Item = (String) SizeOp.getSelectedItem();
            switch(Item){
                case "12":
                    TextContainer.setFont(TextContainer.getFont().deriveFont(12F));
                    break;
                case "14":
                    TextContainer.setFont(TextContainer.getFont().deriveFont(14F));
                    break;
                case "16":
                    TextContainer.setFont(TextContainer.getFont().deriveFont(16F));
                    break;
                case "18":
                    TextContainer.setFont(TextContainer.getFont().deriveFont(18F));
                    break;
            }
        });
        //-----------------------------------------------
        
        //Cambiando el Estilo del Texto------------------
        StyleOp.addActionListener((ActionEvent e) -> {
            String Item = (String) StyleOp.getSelectedItem();
            switch(Item){
                case "Bold":
                    TextContainer.setFont(TextContainer.getFont().deriveFont(Font.BOLD));
                    break;
                case "Italic":
                    TextContainer.setFont(TextContainer.getFont().deriveFont(Font.ITALIC));
                    break;
                case "None":
                    TextContainer.setFont(TextContainer.getFont().deriveFont(Font.TRUETYPE_FONT));
                    break;
            }
        });
        //-----------------------------------------------
        
        //Cambiando el Color del Texto-------------------
        ColorOp1.addActionListener((ActionEvent e) -> {
            TextContainer.setForeground(Blue);
        });
        ColorOp2.addActionListener((ActionEvent e) -> {
            TextContainer.setForeground(Red);
        });
        ColorOp3.addActionListener((ActionEvent e) -> {
            TextContainer.setForeground(Green);
        });
        ColorOp4.addActionListener((ActionEvent e) -> {
            TextContainer.setForeground(Black);
        });
        //-----------------------------------------------

                    }
    
    private void icon() {
        /*
            Aqui se crea una variable tipo URL para almacenar el url del
            icono usado en la aplicacion. Despues una variable tipo Image 
            que retorna los datos de la imagen leida a traves del url. Por
            ultimo se asigna el icono a partir de la imagen guardada en la 
            variable tipo Image, ya que la clase Image es tipo IO require 
            un manejo de excepcion IOException.
        */
        try {
            URL url = new URL("http://aux.iconspalace.com/uploads/1547650046514608227.png");
            Image image = ImageIO.read(url); 
            setIconImage(new ImageIcon(image).getImage());
        } catch(IOException Ex){
            System.out.println("No Connection - No Icon is provided.");
        }
    } 
    
}
